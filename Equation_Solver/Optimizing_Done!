#define PI 3.14159265f

#define F(x) powf(x,2.0f)-4.0f /* F(x) = 0, solve. */

#define X_END 32767.0f /* Search breadth */
#define X_BEGIN -X_END

#define STEP_SIZE 1

#define RIGHT_PROXIMITY 0.0078125f /* Closeness to zero. */
#define LEFT_PROXIMITY -RIGHT_PROXIMITY

/*
float sinf (float x);         sine of an angle of x radians.
float expf (float x);         base-e exponential function of x
float atanf (float x);        arctan
float logf (float x);   log base e
float log10f (float x);       log base 10
float sqrtf (float x);        square root 
float fabsf (float x);        absolute value
float powf (float base, float exponent);
*/

#include <math.h>
#include <stdio.h>

union fp_bit_twiddler {
    float my_f;
    int my_i;
}; 

int main() {

union fp_bit_twiddler _y0;
union fp_bit_twiddler _y1;
register union fp_bit_twiddler _x1;

    float _x0 = X_BEGIN;
    _x1.my_f = X_BEGIN * 1.00001525878f;
    _y0.my_f = F(_x0);
    _y1.my_f = F(_x1.my_f);
    
    printf("Solutions: \n");
    
    loop1:
        if ( (_y0.my_i & 0x80000000) ^ (_y1.my_i & 0x80000000) ) 
		printf("%g \n", _x0);
        _y0.my_f = _y1.my_f;
        _x0 = _x1.my_f;
        _x1.my_i -= STEP_SIZE;
        _y1.my_f = F(_x1.my_f);
    if(_x1.my_f < LEFT_PROXIMITY) goto loop1;   

    _x1.my_f = 0.0f;
    _y1.my_f = F(_x1.my_f);
    _y0.my_f = _y1.my_f;
    _x0 = _x1.my_f;
    _x1.my_f = RIGHT_PROXIMITY;
    
    loop2:
        _y1.my_f = F(_x1.my_f);

        if ( (_y0.my_i & 0x80000000) ^ (_y1.my_i & 0x80000000) ) 
   		printf("%g \n", _x0);
        _y0.my_f = _y1.my_f;
        _x0 = _x1.my_f;
        _x1.my_i += STEP_SIZE;
    if(_x1.my_f < X_END) goto loop2;

    return 0;
}
