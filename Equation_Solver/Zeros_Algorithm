#define PI 3.14159265f

#define F(x) powf(x,2.0f)-4.0f // F(x) = 0, solve.

#define X_END 32767.0f //Search breadth
#define X_BEGIN -X_END

#define STEP_SIZE 1

#define RIGHT_PROXIMITY 0.0078125f //Closeness to zero.
#define LEFT_PROXIMITY -RIGHT_PROXIMITY

#define THRESHOLD 0.00024414062f //Margin of error

#include <math.h>
#include <stdio.h>

int main() {
	int hasSolution = 0; // C boolean value

	float x0_x1_y0_y1[4] = { X_BEGIN, X_BEGIN * 1.00001525878f, F(
			x0_x1_y0_y1[0]), F(x0_x1_y0_y1[1]) };
	int * const x_mantissa = (int * const ) (&x0_x1_y0_y1[1]);
	printf("Solutions: ");

	if (x0_x1_y0_y1[2] < 0.0f)
		x0_x1_y0_y1[2] = -x0_x1_y0_y1[2];

	while (x0_x1_y0_y1[1] < LEFT_PROXIMITY) {

		if (x0_x1_y0_y1[3] < 0.0f)
			x0_x1_y0_y1[3] = -x0_x1_y0_y1[3];

		if (x0_x1_y0_y1[2] > THRESHOLD) {
			hasSolution = 0;
		} else {
			if ((x0_x1_y0_y1[3] >= x0_x1_y0_y1[2]) && (hasSolution == 0)) {
				printf("%g \n", x0_x1_y0_y1[0]);
				hasSolution = 1;
			}
		}
		x0_x1_y0_y1[2] = x0_x1_y0_y1[3];
		x0_x1_y0_y1[0] = x0_x1_y0_y1[1];

		*x_mantissa -= STEP_SIZE;
		x0_x1_y0_y1[3] = F(x0_x1_y0_y1[1]);
	}

	x0_x1_y0_y1[1] = 0.0f;
	hasSolution = 0;
	x0_x1_y0_y1[3] = F(x0_x1_y0_y1[1]);
	if (x0_x1_y0_y1[3] < 0.0f)
		x0_x1_y0_y1[3] = -x0_x1_y0_y1[3];
	x0_x1_y0_y1[2] = x0_x1_y0_y1[3];
	x0_x1_y0_y1[0] = x0_x1_y0_y1[1];
	x0_x1_y0_y1[1] = RIGHT_PROXIMITY;

	while (x0_x1_y0_y1[1] < X_END) {
		x0_x1_y0_y1[3] = F(x0_x1_y0_y1[1]);
		if (x0_x1_y0_y1[3] < 0.0f)
			x0_x1_y0_y1[3] = -x0_x1_y0_y1[3];

		if (x0_x1_y0_y1[2] > THRESHOLD) {
			hasSolution = 0;
		} else {
			if ((x0_x1_y0_y1[3] >= x0_x1_y0_y1[2]) && (hasSolution == 0)) {
				printf("%g \n", x0_x1_y0_y1[0]);
				hasSolution = 1;
			}
		}
		x0_x1_y0_y1[2] = x0_x1_y0_y1[3];
		x0_x1_y0_y1[0] = x0_x1_y0_y1[1];

		*x_mantissa += STEP_SIZE;
	}
	return 0;
}
